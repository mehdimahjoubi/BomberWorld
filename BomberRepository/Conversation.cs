//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace BomberRepository
{
    public partial class Conversation
    {
        #region Primitive Properties
    
        public virtual int ConversationId
        {
            get;
            set;
        }
    
        public virtual string ConversationLog
        {
            get;
            set;
        }
    
        public virtual int HostPlayerId
        {
            get { return _hostPlayerId; }
            set
            {
                if (_hostPlayerId != value)
                {
                    if (Host != null && Host.PlayerId != value)
                    {
                        Host = null;
                    }
                    _hostPlayerId = value;
                }
            }
        }
        private int _hostPlayerId;

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<Player> Players
        {
            get
            {
                if (_players == null)
                {
                    var newCollection = new FixupCollection<Player>();
                    newCollection.CollectionChanged += FixupPlayers;
                    _players = newCollection;
                }
                return _players;
            }
            set
            {
                if (!ReferenceEquals(_players, value))
                {
                    var previousValue = _players as FixupCollection<Player>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupPlayers;
                    }
                    _players = value;
                    var newValue = value as FixupCollection<Player>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupPlayers;
                    }
                }
            }
        }
        private ICollection<Player> _players;
    
        public virtual Player Host
        {
            get { return _host; }
            set
            {
                if (!ReferenceEquals(_host, value))
                {
                    var previousValue = _host;
                    _host = value;
                    FixupHost(previousValue);
                }
            }
        }
        private Player _host;
    
        public virtual Game CurrentGame
        {
            get { return _currentGame; }
            set
            {
                if (!ReferenceEquals(_currentGame, value))
                {
                    var previousValue = _currentGame;
                    _currentGame = value;
                    FixupCurrentGame(previousValue);
                }
            }
        }
        private Game _currentGame;

        #endregion
        #region Association Fixup
    
        private void FixupHost(Player previousValue)
        {
            if (previousValue != null && previousValue.HostedConversations.Contains(this))
            {
                previousValue.HostedConversations.Remove(this);
            }
    
            if (Host != null)
            {
                if (!Host.HostedConversations.Contains(this))
                {
                    Host.HostedConversations.Add(this);
                }
                if (HostPlayerId != Host.PlayerId)
                {
                    HostPlayerId = Host.PlayerId;
                }
            }
        }
    
        private void FixupCurrentGame(Game previousValue)
        {
            if (previousValue != null && ReferenceEquals(previousValue.Conversation, this))
            {
                previousValue.Conversation = null;
            }
    
            if (CurrentGame != null)
            {
                CurrentGame.Conversation = this;
            }
        }
    
        private void FixupPlayers(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Player item in e.NewItems)
                {
                    if (!item.Conversations.Contains(this))
                    {
                        item.Conversations.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Player item in e.OldItems)
                {
                    if (item.Conversations.Contains(this))
                    {
                        item.Conversations.Remove(this);
                    }
                }
            }
        }

        #endregion
    }
}
