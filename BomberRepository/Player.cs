//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace BomberRepository
{
    public partial class Player
    {
        #region Primitive Properties
    
        public virtual int PlayerId
        {
            get;
            set;
        }
    
        public virtual string Pseudonym
        {
            get;
            set;
        }
    
        public virtual string PlayerStatus
        {
            get;
            set;
        }
    
        public virtual string PlayerDescription
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual Account Account
        {
            get { return _account; }
            set
            {
                if (!ReferenceEquals(_account, value))
                {
                    var previousValue = _account;
                    _account = value;
                    FixupAccount(previousValue);
                }
            }
        }
        private Account _account;
    
        public virtual ICollection<Conversation> Conversations
        {
            get
            {
                if (_conversations == null)
                {
                    var newCollection = new FixupCollection<Conversation>();
                    newCollection.CollectionChanged += FixupConversations;
                    _conversations = newCollection;
                }
                return _conversations;
            }
            set
            {
                if (!ReferenceEquals(_conversations, value))
                {
                    var previousValue = _conversations as FixupCollection<Conversation>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupConversations;
                    }
                    _conversations = value;
                    var newValue = value as FixupCollection<Conversation>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupConversations;
                    }
                }
            }
        }
        private ICollection<Conversation> _conversations;
    
        public virtual ICollection<Conversation> HostedConversations
        {
            get
            {
                if (_hostedConversations == null)
                {
                    var newCollection = new FixupCollection<Conversation>();
                    newCollection.CollectionChanged += FixupHostedConversations;
                    _hostedConversations = newCollection;
                }
                return _hostedConversations;
            }
            set
            {
                if (!ReferenceEquals(_hostedConversations, value))
                {
                    var previousValue = _hostedConversations as FixupCollection<Conversation>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupHostedConversations;
                    }
                    _hostedConversations = value;
                    var newValue = value as FixupCollection<Conversation>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupHostedConversations;
                    }
                }
            }
        }
        private ICollection<Conversation> _hostedConversations;
    
        public virtual ICollection<Game> WinnedGames
        {
            get
            {
                if (_winnedGames == null)
                {
                    var newCollection = new FixupCollection<Game>();
                    newCollection.CollectionChanged += FixupWinnedGames;
                    _winnedGames = newCollection;
                }
                return _winnedGames;
            }
            set
            {
                if (!ReferenceEquals(_winnedGames, value))
                {
                    var previousValue = _winnedGames as FixupCollection<Game>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupWinnedGames;
                    }
                    _winnedGames = value;
                    var newValue = value as FixupCollection<Game>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupWinnedGames;
                    }
                }
            }
        }
        private ICollection<Game> _winnedGames;
    
        public virtual ICollection<Player> Friends
        {
            get
            {
                if (_friends == null)
                {
                    _friends = new FixupCollection<Player>();
                }
                return _friends;
            }
            set
            {
                _friends = value;
            }
        }
        private ICollection<Player> _friends;
    
        public virtual ICollection<Player> FriendshipRequestedPlayers
        {
            get
            {
                if (_friendshipRequestedPlayers == null)
                {
                    var newCollection = new FixupCollection<Player>();
                    newCollection.CollectionChanged += FixupFriendshipRequestedPlayers;
                    _friendshipRequestedPlayers = newCollection;
                }
                return _friendshipRequestedPlayers;
            }
            set
            {
                if (!ReferenceEquals(_friendshipRequestedPlayers, value))
                {
                    var previousValue = _friendshipRequestedPlayers as FixupCollection<Player>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupFriendshipRequestedPlayers;
                    }
                    _friendshipRequestedPlayers = value;
                    var newValue = value as FixupCollection<Player>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupFriendshipRequestedPlayers;
                    }
                }
            }
        }
        private ICollection<Player> _friendshipRequestedPlayers;
    
        public virtual ICollection<Player> PlayersRequestingFriendship
        {
            get
            {
                if (_playersRequestingFriendship == null)
                {
                    var newCollection = new FixupCollection<Player>();
                    newCollection.CollectionChanged += FixupPlayersRequestingFriendship;
                    _playersRequestingFriendship = newCollection;
                }
                return _playersRequestingFriendship;
            }
            set
            {
                if (!ReferenceEquals(_playersRequestingFriendship, value))
                {
                    var previousValue = _playersRequestingFriendship as FixupCollection<Player>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupPlayersRequestingFriendship;
                    }
                    _playersRequestingFriendship = value;
                    var newValue = value as FixupCollection<Player>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupPlayersRequestingFriendship;
                    }
                }
            }
        }
        private ICollection<Player> _playersRequestingFriendship;

        #endregion
        #region Association Fixup
    
        private void FixupAccount(Account previousValue)
        {
            if (previousValue != null && ReferenceEquals(previousValue.Player, this))
            {
                previousValue.Player = null;
            }
    
            if (Account != null)
            {
                Account.Player = this;
            }
        }
    
        private void FixupConversations(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Conversation item in e.NewItems)
                {
                    if (!item.Players.Contains(this))
                    {
                        item.Players.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Conversation item in e.OldItems)
                {
                    if (item.Players.Contains(this))
                    {
                        item.Players.Remove(this);
                    }
                }
            }
        }
    
        private void FixupHostedConversations(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Conversation item in e.NewItems)
                {
                    item.Host = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Conversation item in e.OldItems)
                {
                    if (ReferenceEquals(item.Host, this))
                    {
                        item.Host = null;
                    }
                }
            }
        }
    
        private void FixupWinnedGames(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Game item in e.NewItems)
                {
                    item.Winner = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Game item in e.OldItems)
                {
                    if (ReferenceEquals(item.Winner, this))
                    {
                        item.Winner = null;
                    }
                }
            }
        }
    
        private void FixupFriendshipRequestedPlayers(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Player item in e.NewItems)
                {
                    if (!item.PlayersRequestingFriendship.Contains(this))
                    {
                        item.PlayersRequestingFriendship.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Player item in e.OldItems)
                {
                    if (item.PlayersRequestingFriendship.Contains(this))
                    {
                        item.PlayersRequestingFriendship.Remove(this);
                    }
                }
            }
        }
    
        private void FixupPlayersRequestingFriendship(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Player item in e.NewItems)
                {
                    if (!item.FriendshipRequestedPlayers.Contains(this))
                    {
                        item.FriendshipRequestedPlayers.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Player item in e.OldItems)
                {
                    if (item.FriendshipRequestedPlayers.Contains(this))
                    {
                        item.FriendshipRequestedPlayers.Remove(this);
                    }
                }
            }
        }

        #endregion
    }
}
